{"name":"Caelan Frameworks - Common","tagline":"Caelan.Frameworks.Common NuGet Package","body":"#Caelan.Frameworks.Common NuGet Package#\r\n\r\n##What is it?##\r\nMy Framework.Common package is an utility framework for delegating the object mapping to a specific class or simply for a password hasher class.\r\n\r\n##`Builder` and `IMapper<TSource, TDestination>`##\r\nYou can use `Builder` class for map a source to a destination or create a new object from the source like this:\r\n```csharp\r\nvar userDto = Builder.Source<User>().Destination<UserDTO>().Build(user); //user is a User instance\r\n```\r\nBut if a `IMapper<User, UserDTO>` implementation is missing it will build an empty `UserDTO`.\r\n`DefaultMapper<TSource, TDestination>` is an abstract class that prepare a simple `IMapper<TSource, TDestination>` implementation, you have only to define a body for `Map(TSource source, ref TDestination destination)` method, like this:\r\n```csharp\r\npublic class UserDTOMapper : DefaultMapper<User, UserDTO>\r\n{\r\n  public override void Map(User source, ref UserDTO destination)\r\n  {\r\n    //body here like\r\n    //destination.Member = source.Member;\r\n    //nothing to return\r\n  }\r\n}\r\n```\r\nAnd you're done. `Builder` class searches for it in assemblies and use it without you have to do nothing more than the `Builder` syntax showed before.\r\nIf `Builder` class can't find it or you have multiple mapper for same types you can specify the mapper like this:\r\n```csharp\r\nvar mapper = new UserDTOMapper();\r\n//if the mapper has some custom property you can initialize them here\r\nvar userDto = Builder.Source<User>().Destination<UserDTO>(mapper).Build(user); //user is a User instance\r\n```\r\n\r\n##`IPasswordEncryptor`##\r\n`IPasswordEncryptor` is a simple interface with one method:\r\n```csharp\r\nstring EncryptPassword(string password)\r\n```\r\nAnd you can inherit from this for a custom password encryptor and reference it by the interface.\r\nI created a small `PasswordHelper` class that provides *SHA512* hashing with a custom salt.\r\n`PasswordHelper` is very simple, you can instantiate like this:\r\n```csharp\r\nconst string salt = \"Salty\";\r\nconst string default = \"Def4ult\";\r\nvar encryptor = new PasswordHelper(salt, default);\r\n//and now you know how to encrypt\r\nencryptor.EncryptPassword(\"123456789\");\r\n```\r\n","google":"UA-57981518-1","note":"Don't delete this file! It's used internally to help with page regeneration."}